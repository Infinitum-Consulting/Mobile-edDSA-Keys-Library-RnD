Dec 11, 2024 - 12:09 IST

1. Android Keystore system 

Key chain API 
Android Keystore provider

Use the KeyChain API when you want system-wide credentials. When an app requests the use of any credential through the KeyChain API, users can choose, through a system-provided UI, which of the installed credentials an app can access. This lets several apps use the same set of credentials with user consent.

Use the Android Keystore provider to let an individual app store its own credentials, which only that app can access. This provides a way for apps to manage credentials that only they can use while providing the same security benefits that the KeyChain API provides for system-wide credentials. This method doesn't require the user to select the credentials.

 Open Source Custodial Wallet - krakenfx
 https://github.com/krakenfx/wallet/blob/main/src/screens/Settings/walletBackup/components/WalletBackupVerify.tsx

Keychain interaction as resetting the generic password or verifying it 
https://github.com/krakenfx/wallet/blob/main/src/secureStore/keychain/index.ts 

Generating public-private key using keystore in android 
https://yggr.medium.com/how-to-generate-public-private-key-in-android-7f3e244c0fd8

Secured keychain provider for kraken wallet 
https://github.com/krakenfx/wallet/blob/main/src/secureStore/SecuredKeychainProvider.tsx

SecuredKeychainProvider
 A React context provider that manages secure retrieval of sensitive cryptographic information:

## Main Responsibilities:
- Provides methods to retrieve mnemonics and seeds
- Implements a security workflow for accessing sensitive data
- Handles different authentication scenarios

## Key Methods

-- getSecuredValue()
Central method for retrieving sensitive information
Handles different authentication scenarios
Manages the retrieval process dynamically

-- checkPassword()
Validates user-entered password
Retrieves secret if password is correct
Manages lockout and error states
Secure Retrieval Methods

-- getMnemonic()
Retrieves wallet recovery phrase
Optional error handling
Requires authentication if seed is protected

-- getSeed()
Retrieves cryptographic seed
Converts hex string to ArrayBuffer
Requires a rationale for access
Supports optional error throwing


Dec 12, 2024 - 12:09 IST

Keystore provides the following categories of operations:

Key generation
Import and export of asymmetric keys (no key wrapping)
Import of raw symmetric keys (no key wrapping)
Asymmetric encryption and decryption with appropriate padding modes
Asymmetric signing and verification with digesting and appropriate padding modes
Symmetric encryption and decryption in appropriate modes, including an AEAD mode
Generation and verification of symmetric message authentication codes

## Another Method of storing the keys 
 
Hardware-Backed Trusted Execution Environment (TEE)

What it is: Use a Secure Element (SE) or Trusted Execution Environment (TEE) to store keys securely at the hardware level.

Why it's secure:
The keys never leave the hardware and are isolated from the OS.
Access to keys is only allowed for cryptographic operations.
Example: Use StrongBox with the Keystore to leverage hardware-backed key storage


Alternatives of storing keys in android keystore system 
- Encrypted Shared Preferences
- Database Encryption
- File Encryption
- Cloud Storage
- Native Encryption


Dec 13, 2024 - 19:27 IST

### expo-secure-store implementation and comparison with Android keystore system 

https://docs.expo.dev/versions/latest/sdk/securestore/

Expo SecureStore and Android Keystore System are both used for securely storing sensitive information, such as passwords or encryption keys, on mobile devices.
However, they differ in how they interact with the underlying hardware and software to provide this security, as well as in their capabilities and the platforms they support.


** why we can't use Expo SecureStore for cryptographic process:

- Cross-platform solution for both iOS and Android.
- On Android, it uses SharedPreferences with encryption and wraps the Android Keystore for encryption and decryption.
- On iOS, it uses Keychain Services, which is Apple's secure storage system.
- It does not guarantee hardware-backed security for key storage on Android devicesâ€”its security relies on the encryption methods provided by the Android OS.
- Focuses on securely storing and retrieving simple data such as strings (passwords, tokens, etc.).
- Does not provide advanced key management operations (e.g., key generation, signing, etc.) but can store keys safely in a database or secure storage after they are generated.
- Best used for storing sensitive data (e.g., user credentials, tokens) where hardware-level security is not strictly necessary.
- Suitable for apps where hardware-backed key storage is not a requirement, but encrypted storage is still needed for storing user data securely.
- Does not guarantee hardware-backed storage for keys on Android. It typically uses software-backed encryption, although it can integrate with the Android Keystore for encryption on Android devices.


** why we need to use Android Keystore system for cryptographic process:

- Provides a secure hardware-backed container for storing cryptographic keys and performing cryptographic operations (like signing and encryption).
- Hardware-backed security: On devices with a trusted execution environment (TEE) or a secure element (SE), the Android Keystore can store cryptographic keys in hardware, making them more secure from attacks such as rooting or physical extraction.
- Keys are never exposed to the app, and cryptographic operations are done directly on the hardware 
- Allows for generation, storage, and management of cryptographic keys directly within the Keystore, with operations like signing, encryption, decryption, and key attestation being supported.
- Provides hardware-backed security for storing and using cryptographic keys.

Dec 15, 2024 16:49 IST

Expo secure store implementation, it's code sampless:

1. installation of library as expo-secure-store for secureStore and ed25519,expo-crypto for generating keys: 

import * as SecureStore from 'expo-secure-store';
import * as ed25519 from '@noble/ed25519';
import { getRandomBytes } from 'expo-crypto';
import { sha512 } from '@noble/hashes/sha512';

2. Storing keys as key-value pairs in secureStore and storing the signature 

await SecureStore.setItemAsync('privateKey', privateKeyHex);
await SecureStore.setItemAsync('publicKey', publicKeyHex);
await SecureStore.setItemAsync('signature', signatureHex);

3. Retrieve key stores by the name stored in store and getting the signature 
  
const storedPrivateKey = await SecureStore.getItemAsync('privateKey');
const storedPublicKey = await SecureStore.getItemAsync('publicKey');
const storedSignature = await SecureStore.getItemAsync('signature');

4. signing the signature using ed25519 

const privateKeyBuffer = getRandomBytes(32);
const publicKeyBuffer = await ed25519.getPublicKey(privateKeyBuffer);

const privateKeyHex = Buffer.from(privateKeyBuffer).toString('hex');
const publicKeyHex = Buffer.from(publicKeyBuffer).toString('hex');

      // Sign the message
const messageBuffer = Buffer.from(message);
const signatureBuffer = await ed25519.sign(messageBuffer, privateKeyBuffer);
const signatureHex = Buffer.from(signatureBuffer).toString('hex');



Dec 16, 2024 13:15 IST

React Native research for getting the best security for using Android Keystore

Understanding with using React-native-keychain (https://oblador.github.io/react-native-keychain/docs/secure-hardware-vs-software)

Android uses two primary levels of security for cryptographic key storage and operations:

1.Secure Hardware (StrongBox Keymaster)
2.Secure Software (Trusted Execution Environment)

What is Secure Hardware (StrongBox Keymaster)?
Secure Hardware refers to a dedicated, physically isolated security chip (e.g., StrongBox). It is designed to provide the highest level of security for cryptographic key operations.

Key Features of Secure Hardware:
1. Hardware Isolation: The cryptographic keys are stored in a secure, tamper-resistant environment that is completely isolated from the main device's operating system and CPU.

2. Hardware-backed Security: Cryptographic operations (like signing or encryption) are performed directly on the hardware, ensuring that the keys never leave the secure environment.

3. Resistant to Physical Attacks: Designed to thwart physical attacks like voltage manipulation or side-channel attacks.

4. StrongBox Support: Devices with Android 9 (API Level 28) or higher may include StrongBox, which enhances hardware-backed security.


What is Secure Software (TEE)?
Secure Software refers to the Trusted Execution Environment (TEE), a secure area of the device's main processor. It provides a sandboxed environment to store and process cryptographic keys securely, but it is not physically isolated like Secure Hardware.

Key Features of TEE:
1. Software Isolation: The TEE is a secure part of the main CPU that runs a separate, trusted OS to handle sensitive operations.

2. Secure Key Storage: Cryptographic keys are stored in the TEE and are protected from the main operating system and apps.
Widely Available: Most Android devices support TEE-based security, even if they lack dedicated Secure Hardware.

## How Does It Affect react-native-keychain?
When using react-native-keychain on Android, the library relies on the Android KeyStore system to store and manage cryptographic keys. The level of security provided depends on the device and its capabilities:

1. StrongBox Enabled Devices: If a device supports StrongBox, react-native-keychain can store keys in the Secure Hardware, offering the highest level of security.

2. TEE-Only Devices: If StrongBox is not available, the keys are stored in the TEE, which is still secure but less resistant to physical attacks.


Dec 17, 2024 21:39 IST

# Implementing Secure Key Storage with React Native Keychain

1.Generate an ED25519 cryptographic key pair (using tweetnacl library).
2.Store the keys securely in the Android Keystore using react-native-keychain.
3.Retrieve the stored keys securely when needed.
4.Delete the stored keys if required.


# Technologies Used

1. React Native: Framework for building mobile applications.
2. react-native-keychain: Secure storage library for credentials.
3. tweetnacl and tweetnacl-util: Cryptographic library for key generation and encoding.


1. Setup and Installation

npm install react-native-keychain tweetnacl tweetnacl-util

2. Generating and Storing ED25519 Keys

 const keyPair = nacl.sign.keyPair();

    //  Encode keys to Base64 for safe storage
    const publicKeyBase64 = naclUtil.encodeBase64(keyPair.publicKey);
    const privateKeyBase64 = naclUtil.encodeBase64(keyPair.secretKey);

    //  Store the private key securely using Keychain
    await Keychain.setGenericPassword(publicKeyBase64, privateKeyBase64, {
      accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,
      securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE, // Enforce hardware-backed storage
    });

3. Retrieving Stored Keys

const credentials = await Keychain.getGenericPassword();

4. Deleting Stored Keys

await Keychain.resetGenericPassword(); // Deletes credentials

5. Verifying Security Level

 const checkSecurityLevel = async () => {
  const securityLevel = await Keychain.getSecurityLevel();
  console.log('Security Level:', securityLevel);
};

SECURITY_LEVEL.SECURE_HARDWARE: Hardware-backed secure storage is used.
SECURITY_LEVEL.SECURE_SOFTWARE: Software-based encryption is used.


Dec 18, 2024 02:01 IST 

Security of SECURE_SOFTWARE:

Encryption within the app: Keys are encrypted and stored within the app's sandbox (the internal storage of the device). The encryption is software-based, which means that it relies on the operating system and app's security mechanisms to prevent unauthorized access.

Vulnerabilities:

a. Rooted/jailbroken devices: On rooted or jailbroken devices, attackers can gain access to the app's storage and potentially extract the cryptographic keys, because the OS security mechanisms are bypassed. The key storage is not isolated by hardware security, and attackers can use tools to access or dump the app's data.
b. Physical access: If an attacker gains physical access to the device (e.g., by accessing the device directly or via malware), extracting the keys from software storage is possible, especially if the device is not properly secured (e.g., with a strong PIN or encryption).
Limited by OS security: Software-based encryption relies on the operating system's security features, such as:

App sandboxing, which isolates your appâ€™s data from other apps.
Encryption within the app that can be protected by a password or biometric (but only when the device is locked).


Security of SECURE_HARDWARE:

Hardware-backed security (e.g., using Android Keystore, Trusted Execution Environment, or a Secure Element) provides significantly stronger protection because the cryptographic keys never leave the secure hardware. The keys are stored in a tamper-resistant module that is not accessible even by the OS, and the key operations (e.g., signing) occur inside the secure hardware, making it much harder for an attacker to extract the keys.


Dec 18, 2024 13:06 IST 

Rotate Keys in android keystore in react native environment:

    const newKeyPair = nacl.sign.keyPair();

    // 2. Encode keys to Base64 for safe storage
    const newPublicKeyBase64 = naclUtil.encodeBase64(newKeyPair.publicKey);
    const newPrivateKeyBase64 = naclUtil.encodeBase64(newKeyPair.secretKey);

    // 3. Store the new private key securely using Keychain
    await Keychain.setGenericPassword(newPublicKeyBase64, newPrivateKeyBase64, {
      accessible: Keychain.ACCESSIBLE.WHEN_UNLOCKED_THIS_DEVICE_ONLY,
      securityLevel: Keychain.SECURITY_LEVEL.SECURE_HARDWARE, // Use hardware-backed storage
    });

    // 4. Optionally, delete the old key pair if it exists
    await Keychain.resetGenericPassword();


## Purpose of jubjub and ed25519:

Ed25519:

1. It is primarily used for digital signatures.
2. Designed as part of the EdDSA (Edwards-curve Digital Signature Algorithm) for fast, secure, and efficient public-key signing.
3. It is widely used in applications like SSH, TLS, and modern cryptographic protocols.
4. Very fast for public key cryptography operations like signing and verification.
5. Widely used in mainstream cryptography because of its efficiency on general-purpose CPUs.

Jubjub:

1. Designed specifically for zero-knowledge proofs and zk-SNARKs, such as those used in privacy-preserving blockchain technologies (e.g., Zcash).
2. Optimized to work efficiently within the context of arithmetic circuits and zk-SNARKs.
3. Jubjub is not typically used for digital signatures outside zero-knowledge systems.
4. Optimized for use in zero-knowledge circuits where operations (like addition and scalar multiplication) must be cheap in terms of "circuit constraints" (low number of gates in arithmetic circuits).
5. Not as fast as Ed25519 for traditional cryptographic operations but outperforms Ed25519 in the context of zero-knowledge proofs.



Dec 19, 2024 09:52 IST

libraries that supports babyjubjub curve creation 

1.circomlib (https://github.com/iden3/circomlib):

Includes pre-implemented BabyJubJub curve operations. It is primarily used with Node.js and ZK toolchains like snarkjs. React Native would require polyfills for Node modules.
Install polyfills like react-native-crypto or react-native-nodeify to make Node.js libraries work with React Native.


2. zk-kit/baby-jubjub(https://www.npmjs.com/package/@zk-kit/baby-jubjub)(791 weekly downloads on npm):

Public and private key generation, signature verification, and hashing support.


3. @noble/curves(https://www.npmjs.com/package/@noble/curves/v/1.0.0)

Provides direct support for the JubJub curve, including key pair generation and public key derivation.
A randomly generated 32-byte value using randomBytes from @noble/hashes/utils.
Derived using jubjub.getPublicKey(privateKey).


#### Android Keystore Backup Analysis

## Core Issue

- Android Keystore keys are non-exportable by design
- This creates a fundamental conflict with Android Auto Backup (enabled by default from Android 6.0+)
- When encrypted data is backed up, it cannot be decrypted on a new device since the keys cannot be transferred

## Auto Backup Scope

# Automatically backs up:

1. Shared preferences files
2. Internal storage files
3. Database files
4. External storage files


Enabled by default for apps targeting Android 6.0 (API 23) and above

## Key Characteristics

# Keys stored in Android Keystore are:

- Secured in a hardware container
- Non-exportable by design
- Can only be used for cryptographic operations within the device



### Available Solutions

## Backend Storage (Recommended)

1. Store encrypted data on remote server
Pros: Secure, controlled environment
Cons: Requires backend infrastructure


## User Input-Based Encryption

- Use user password/input as encryption key
- Hash the input for better security
- Can encrypt the password using Keystore
Pros: High security
Cons: Requires user action



Dec 23, 2024  01:19 IST

## the process of integrating biometric authentication using the react-native-keychain library in a React Native application.

- Biometric authentication allows users to securely store and retrieve sensitive data, such as credentials, with the help of fingerprint or face recognition.

async function saveCredentials(username, password) {
  try {
    await Keychain.setGenericPassword(username, password, {
      accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY, // Allows any type of biometric authentication
      securityLevel: Keychain.SECURITY_LEVEL.SECURE_SOFTWARE, // Ensures a secure level of protection
    });
    console.log('Credentials saved successfully!');
  } catch (error) {
    console.error('Error saving credentials:', error);
  }
}

ACCESS_CONTROL.BIOMETRY_ANY: Ensures credentials are protected by any available biometric authentication 


# Retrieving Credentials with Biometric Authentication

async function getCredentials() {
  try {
    const credentials = await Keychain.getGenericPassword({
      accessControl: Keychain.ACCESS_CONTROL.BIOMETRY_ANY,
    });

    if (credentials) {
      console.log('Credentials retrieved successfully:', credentials);
      // Use credentials.username and credentials.password
    } else {
      console.log('No credentials stored.');
    }
  } catch (error) {
    console.error('Error retrieving credentials:', error);
  }
}

# addition of below line for the android in AndroidManifest.xml
<uses-permission android:name="android.permission.USE_BIOMETRIC" />

 

Dec 25th, 2024 20:29 IST

# Merry Christmas #

#### Cloud Backup of Cryptographic Keys

- Encrypted Cloud Storage
In this method, cryptographic keys are encrypted with a Key Encryption Key (KEK) before being stored in the cloud.

How it Works:
A secure key is generated to encrypt the cryptographic key.
The encrypted key is stored in cloud storage services like AWS S3, Google Cloud Storage, or Azure Blob Storage.

-- Key Management Services (KMS)
Cloud providers offer dedicated Key Management Services to handle cryptographic key storage and management.

Examples: AWS KMS, Google Cloud KMS, Azure Key Vault.
Features:
- Secure generation, storage, and lifecycle management of keys.
- Integrated access control via IAM policies.
- Built-in redundancy and automated backups.

-- Hardware Security Modules (HSMs) in the Cloud
HSMs are tamper-proof hardware devices that securely store cryptographic keys. Cloud providers offer HSMs as a service.

Examples: AWS CloudHSM, Azure Dedicated HSM, Google Cloud EKM.
How it Works:
- Keys are generated and stored within the HSM.
- HSMs are backed up across multiple cloud regions for redundancy.

-- Hybrid Backup Approach
A combination of on-premise and cloud backups is used to balance security and accessibility.

How it Works:
- Keys are stored in an on-premise HSM or secure environment.
- Encrypted backups are uploaded to the cloud as a secondary copy.


-- Backup with Key Wrapping
Key wrapping is a method of encrypting one key with another key (the wrapping key).

How it Works:
- The cryptographic key is wrapped with a KEK.
- The wrapped key is securely backed up to the cloud.

1.1 Encryption Layers

Data Encryption Key (DEK): Encrypts the secret key
Key Encryption Key (KEK): Encrypts the DEK
Master Key: Stored in HSM, protects the KEK

1.2 Storage Components

Cloud Key Management Service (KMS)
Hardware Security Module (HSM)
Distributed Storage System
Backup Management System

  async initializeGoogleSignIn() {
    try {
      await GoogleSignin.configure({
        scopes: ['https://www.googleapis.com/auth/drive.appdata'],
        webClientId: 'YOUR_WEB_CLIENT_ID',
      });
    } catch (error) {
      console.error('Google Sign-In initialization failed:', error);
      throw error;
    }
  }

  // Generate a random encryption key
  generateEncryptionKey() {
    return CryptoJS.lib.WordArray.random(256/8).toString();
  }

  // Encrypt the secret key
  encryptSecretKey(secretKey, encryptionKey) {
    try {
      return CryptoJS.AES.encrypt(secretKey, encryptionKey).toString();
    } catch (error) {
      console.error('Encryption failed:', error);
      throw error;
    }
  }

  // Decrypt the secret key
  decryptSecretKey(encryptedKey, encryptionKey) {
    try {
      const bytes = CryptoJS.AES.decrypt(encryptedKey, encryptionKey);
      return bytes.toString(CryptoJS.enc.Utf8);
    } catch (error) {
      console.error('Decryption failed:', error);
      throw error;
    }
  }

  // Store encrypted key in Google Drive's AppData folder
  async storeInGoogleDrive(encryptedKey, metadata) {
    try {
      const tokens = await GoogleSignin.getTokens();
      const fileMetadata = {
        name: 'encrypted_key.dat',
        parents: ['appDataFolder']
      };

      const media = {
        mimeType: 'application/octet-stream',
        body: JSON.stringify({
          encryptedKey,
          metadata,
          timestamp: new Date().toISOString()
        })
      };

      const response = await this.drive.files.create({
        auth: tokens.accessToken,
        resource: fileMetadata,
        media: media,
        fields: 'id'
      });

      return response.data.id;
    } catch (error) {
      console.error('Google Drive storage failed:', error);
      throw error;
    }
  }

  // Retrieve encrypted key from Google Drive
  async retrieveFromGoogleDrive(fileId) {
    try {
      const tokens = await GoogleSignin.getTokens();
      const response = await this.drive.files.get({
        auth: tokens.accessToken,
        fileId: fileId,
        alt: 'media'
      });

      return JSON.parse(response.data);
    } catch (error) {
      console.error('Google Drive retrieval failed:', error);
      throw error;
    }
  }

  // Store encryption key reference locally
  async storeKeyReference(keyId) {
    try {
      await AsyncStorage.setItem('KEY_REFERENCE', keyId);
    } catch (error) {
      console.error('Local storage failed:', error);
      throw error;
    }
  }

  // Get encryption key reference
  async getKeyReference() {
    try {
      return await AsyncStorage.setItem('KEY_REFERENCE');
    } catch (error) {
      console.error('Local storage retrieval failed:', error);
      throw error;
    }
  }


// Kotlin Research 

/**
 * Utility class for generating Ed25519 cryptographic key pairs using the BouncyCastle library.
 * Ed25519 is a modern digital signature system that offers strong security and good performance.
 *
 * Example usage:
 * ```
 * val keyGenerator = Ed25519KeyGenerator()
 * val keyPair = keyGenerator.generateKeyPair()
 * ```
 */
import org.bouncycastle.asn1.pkcs.PrivateKeyInfo
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo
import org.bouncycastle.crypto.AsymmetricCipherKeyPair
import org.bouncycastle.crypto.generators.Ed25519KeyPairGenerator
import org.bouncycastle.crypto.params.Ed25519KeyGenerationParameters
import org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters
import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters
import org.bouncycastle.crypto.util.PrivateKeyInfoFactory
import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory
import java.security.SecureRandom

class Ed25519KeyGenerator {
    /**
     * Generates a new Ed25519 key pair.
     *
     * The generated keys are returned in ASN.1 encoded format, which is a standardized
     * format suitable for storage and transmission.
     *
     * @return A [KeyPair] containing the generated private and public keys
     * @throws RuntimeException if key generation fails
     */
    fun generateKeyPair(): KeyPair {
        try {
            // Create and initialize the key pair generator with secure random source
            val keyPairGenerator = Ed25519KeyPairGenerator().apply {
                init(Ed25519KeyGenerationParameters(SecureRandom()))
            }
            
            // Generate the cryptographic key pair
            val keyPair: AsymmetricCipherKeyPair = keyPairGenerator.generateKeyPair()
            
            // Extract the private and public key components
            val privateKey = keyPair.private as Ed25519PrivateKeyParameters
            val publicKey = keyPair.public as Ed25519PublicKeyParameters
            
            // Convert keys to standard ASN.1 format
            val privateKeyInfo: PrivateKeyInfo = PrivateKeyInfoFactory.createPrivateKeyInfo(privateKey)
            val publicKeyInfo: SubjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKey)
            
            // Return the encoded key pair
            return KeyPair(
                privateKey = privateKeyInfo.encoded,
                publicKey = publicKeyInfo.encoded
            )
        } catch (e: Exception) {
            throw RuntimeException("Failed to generate Ed25519 key pair", e)
        }
    }
    
    /**
     * Data class representing an Ed25519 key pair.
     *
     * @property privateKey The private key in ASN.1 DER encoded format
     * @property publicKey The public key in ASN.1 DER encoded format
     */
    data class KeyPair(
        val privateKey: ByteArray,
        val publicKey: ByteArray
    ) {
        override fun equals(other: Any?): Boolean {
            if (this === other) return true
            if (javaClass != other?.javaClass) return false
            
            other as KeyPair
            
            if (!privateKey.contentEquals(other.privateKey)) return false
            if (!publicKey.contentEquals(other.publicKey)) return false
            
            return true
        }
        
        override fun hashCode(): Int {
            var result = privateKey.contentHashCode()
            result = 31 * result + publicKey.contentHashCode()
            return result
        }
    }
}

// Example usage in Main.kt
import java.util.Base64

/**
 * Example program demonstrating the generation of Ed25519 keys.
 * This program generates a key pair and prints them in Base64 format.
 */
fun main() {
    try {
        // Create key generator instance
        val keyGenerator = Ed25519KeyGenerator()
        
        // Generate a new key pair
        val keyPair = keyGenerator.generateKeyPair()
        
        // Convert keys to Base64 for easy viewing/storage
        val privateKeyBase64 = Base64.getEncoder().encodeToString(keyPair.privateKey)
        val publicKeyBase64 = Base64.getEncoder().encodeToString(keyPair.publicKey)
        
        // Print the generated keys
        println("Ed25519 Key Pair Generated Successfully")
        println("=======================================")
        println("Private key (Base64):")
        println(privateKeyBase64)
        println("\nPublic key (Base64):")
        println(publicKeyBase64)
        
    } catch (e: Exception) {
        println("Error generating keys: ${e.message}")
        e.printStackTrace()
    }
}


####  BabyJubJub key pair creation 


/**
 * Generator for BabyJubjub keys, using the twisted Edwards curve
 * a * x^2 + y^2 = 1 + d * x^2 * y^2
 * where:
 * a = 168700
 * d = 168696
 */
class BabyJubjubKeyGenerator {
    companion object {
        // BabyJubjub curve parameters
        private val PRIME = BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617")
        private val SUB_ORDER = BigInteger("2736030358979909402780800718157159386076813972158567259200215660948447373041")
        private val CURVE_ORDER = PRIME.subtract(BigInteger.ONE)

        // Base point coordinates
        private val BASE_POINT_X = BigInteger("17777552123799933955779906779655732241715742912184938656739573121738514868268")
        private val BASE_POINT_Y = BigInteger("2626589144620713026669568689430873010625803728049924121243784502389097019475")
    }

    /**
     * Represents a point on the BabyJubjub curve
     */
    data class Point(val x: BigInteger, val y: BigInteger)

    /**
     * Represents a BabyJubjub key pair
     */
    data class KeyPair(
        val privateKey: BigInteger,
        val publicKey: Point
    )

    /**
     * Generates a new BabyJubjub key pair
     */
    fun generateKeyPair(): KeyPair {
        // Generate private key
        val privateKey = generatePrivateKey()

        // Calculate public key by multiplying base point with private key
        val publicKey = scalarMult(Point(BASE_POINT_X, BASE_POINT_Y), privateKey)

        return KeyPair(privateKey, publicKey)
    }

    /**
     * Generates a random private key within the valid range
     */
    private fun generatePrivateKey(): BigInteger {
        val random = SecureRandom()
        var privateKey: BigInteger

        do {
            val bytes = ByteArray(32)
            random.nextBytes(bytes)
            privateKey = BigInteger(1, bytes).mod(SUB_ORDER)
        } while (privateKey == BigInteger.ZERO)

        return privateKey
    }

    /**
     * Performs scalar multiplication of a point on the curve
     */
    private fun scalarMult(point: Point, scalar: BigInteger): Point {
        var result = Point(BigInteger.ZERO, BigInteger.ONE)
        var temp = point
        var n = scalar

        while (n > BigInteger.ZERO) {
            if (n.and(BigInteger.ONE) == BigInteger.ONE) {
                result = addPoints(result, temp)
            }
            temp = addPoints(temp, temp)
            n = n.shiftRight(1)
        }

        return result
    }

    /**
     * Adds two points on the BabyJubjub curve
     */
    private fun addPoints(p1: Point, p2: Point): Point {
        val x1 = p1.x
        val y1 = p1.y
        val x2 = p2.x
        val y2 = p2.y

        // BabyJubjub curve parameters
        val a = BigInteger("168700")
        val d = BigInteger("168696")

        // Point addition formulas for twisted Edwards curves
        val x3Num = (x1.multiply(y2).add(y1.multiply(x2))).mod(PRIME)
        val x3Den = (BigInteger.ONE.add(d.multiply(x1).multiply(x2).multiply(y1).multiply(y2))).mod(PRIME)
        val y3Num = (y1.multiply(y2).subtract(a.multiply(x1).multiply(x2))).mod(PRIME)
        val y3Den = (BigInteger.ONE.subtract(d.multiply(x1).multiply(x2).multiply(y1).multiply(y2))).mod(PRIME)

        val x3 = x3Num.multiply(x3Den.modInverse(PRIME)).mod(PRIME)
        val y3 = y3Num.multiply(y3Den.modInverse(PRIME)).mod(PRIME)

        return Point(x3, y3)
    }
}


