Dec 11, 2024 - 12:09 IST

1. Android Keystore system 

Key chain API 
Android Keystore provider

Use the KeyChain API when you want system-wide credentials. When an app requests the use of any credential through the KeyChain API, users can choose, through a system-provided UI, which of the installed credentials an app can access. This lets several apps use the same set of credentials with user consent.

Use the Android Keystore provider to let an individual app store its own credentials, which only that app can access. This provides a way for apps to manage credentials that only they can use while providing the same security benefits that the KeyChain API provides for system-wide credentials. This method doesn't require the user to select the credentials.

 Open Source Custodial Wallet - krakenfx
 https://github.com/krakenfx/wallet/blob/main/src/screens/Settings/walletBackup/components/WalletBackupVerify.tsx

Keychain interaction as resetting the generic password or verifying it 
https://github.com/krakenfx/wallet/blob/main/src/secureStore/keychain/index.ts 

Generating public-private key using keystore in android 
https://yggr.medium.com/how-to-generate-public-private-key-in-android-7f3e244c0fd8

Secured keychain provider for kraken wallet 
https://github.com/krakenfx/wallet/blob/main/src/secureStore/SecuredKeychainProvider.tsx

SecuredKeychainProvider
 A React context provider that manages secure retrieval of sensitive cryptographic information:

## Main Responsibilities:
- Provides methods to retrieve mnemonics and seeds
- Implements a security workflow for accessing sensitive data
- Handles different authentication scenarios

## Key Methods

-- getSecuredValue()
Central method for retrieving sensitive information
Handles different authentication scenarios
Manages the retrieval process dynamically

-- checkPassword()
Validates user-entered password
Retrieves secret if password is correct
Manages lockout and error states
Secure Retrieval Methods

-- getMnemonic()
Retrieves wallet recovery phrase
Optional error handling
Requires authentication if seed is protected

-- getSeed()
Retrieves cryptographic seed
Converts hex string to ArrayBuffer
Requires a rationale for access
Supports optional error throwing


Dec 12, 2024 - 12:09 IST

Keystore provides the following categories of operations:

Key generation
Import and export of asymmetric keys (no key wrapping)
Import of raw symmetric keys (no key wrapping)
Asymmetric encryption and decryption with appropriate padding modes
Asymmetric signing and verification with digesting and appropriate padding modes
Symmetric encryption and decryption in appropriate modes, including an AEAD mode
Generation and verification of symmetric message authentication codes

## Another Method of storing the keys 
 
Hardware-Backed Trusted Execution Environment (TEE)

What it is: Use a Secure Element (SE) or Trusted Execution Environment (TEE) to store keys securely at the hardware level.

Why it's secure:
The keys never leave the hardware and are isolated from the OS.
Access to keys is only allowed for cryptographic operations.
Example: Use StrongBox with the Keystore to leverage hardware-backed key storage


Alternatives of storing keys in android keystore system 
- Encrypted Shared Preferences
- Database Encryption
- File Encryption
- Cloud Storage
- Native Encryption


Dec 13, 2024 - 19:27 IST

### expo-secure-store implementation and comparison with Android keystore system 

https://docs.expo.dev/versions/latest/sdk/securestore/

Expo SecureStore and Android Keystore System are both used for securely storing sensitive information, such as passwords or encryption keys, on mobile devices.
However, they differ in how they interact with the underlying hardware and software to provide this security, as well as in their capabilities and the platforms they support.


** why we can't use Expo SecureStore for cryptographic process:

- Cross-platform solution for both iOS and Android.
- On Android, it uses SharedPreferences with encryption and wraps the Android Keystore for encryption and decryption.
- On iOS, it uses Keychain Services, which is Apple's secure storage system.
- It does not guarantee hardware-backed security for key storage on Android devicesâ€”its security relies on the encryption methods provided by the Android OS.
- Focuses on securely storing and retrieving simple data such as strings (passwords, tokens, etc.).
- Does not provide advanced key management operations (e.g., key generation, signing, etc.) but can store keys safely in a database or secure storage after they are generated.
- Best used for storing sensitive data (e.g., user credentials, tokens) where hardware-level security is not strictly necessary.
- Suitable for apps where hardware-backed key storage is not a requirement, but encrypted storage is still needed for storing user data securely.
- Does not guarantee hardware-backed storage for keys on Android. It typically uses software-backed encryption, although it can integrate with the Android Keystore for encryption on Android devices.


** why we need to use Android Keystore system for cryptographic process:

- Provides a secure hardware-backed container for storing cryptographic keys and performing cryptographic operations (like signing and encryption).
- Hardware-backed security: On devices with a trusted execution environment (TEE) or a secure element (SE), the Android Keystore can store cryptographic keys in hardware, making them more secure from attacks such as rooting or physical extraction.
- Keys are never exposed to the app, and cryptographic operations are done directly on the hardware 
- Allows for generation, storage, and management of cryptographic keys directly within the Keystore, with operations like signing, encryption, decryption, and key attestation being supported.
- Provides hardware-backed security for storing and using cryptographic keys.
